(dp1
S'output'
p2
S"<type 'exceptions.KeyError'> 'first_name'"
p3
sS'layer'
p4
S'/home/marco/projects/final/web2py/applications/woppi/models/db.py'
p5
sS'code'
p6
S"# -*- coding: utf-8 -*-\nfrom gluon.tools import *\nfrom auth import CustomAuthentication\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n## File is released under public domain and you can use without limitations\n#########################################################################\n\n## if SSL/HTTPS is properly configured and you want all HTTP requests to\n## be redirected to HTTPS, uncomment the line below:\n# request.requires_https()\n\ndb = DAL('sqlite://storage.sqlite')\n\n## by default give a view/generic.extension to all actions from localhost\n## none otherwise. a pattern can be 'controller/function.extension'\nresponse.generic_patterns = ['*'] if request.is_local else []\n## (optional) optimize handling of static files\n# response.optimize_css = 'concat,minify,inline'\n# response.optimize_js = 'concat,minify,inline'\n\n#########################################################################\n## Here is sample code if you need for\n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - old style crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import Auth, Crud, Service, PluginManager, prettydate\nauth = Auth(db, hmac_key=Auth.get_or_create_key())\ncrud, service, plugins = Crud(db), Service(), PluginManager()\n\n## create all tables needed by auth if not custom tables\n\ndb.define_table(auth.settings.table_user_name,\n    Field('nombre', length=128, default=''),\n    Field('apellido', length=128, default=''),\n    Field('username','string', unique=True, label='Nombre de usuario'),\n    Field('email', length=128, default='' ), # required\n    Field('password', 'password', length=512, readable=False, label='Password'),\n    Field('address'),\n    Field('city'),\n    Field('zip'),\n    Field('phone'),\n    Field('registration_key', length=512, writable=False, readable=False, default=''),\n    Field('reset_password_key', length=512, writable=False, readable=False, default=''),\n    Field('registration_id', length=512, writable=False, readable=False, default=''))\n\n## do not forget validators\ncustom_auth_table = db[auth.settings.table_user_name] # get the custom_auth_table\ncustom_auth_table.first_name.requires = IS_NOT_EMPTY(error_message=auth.messages.is_empty)\ncustom_auth_table.last_name.requires = IS_NOT_EMPTY(error_message=auth.messages.is_empty)\ncustom_auth_table.password.requires = [IS_STRONG(), CRYPT()]\ncustom_auth_table.email.requires = [ IS_EMAIL(error_message=auth.messages.invalid_email), IS_NOT_IN_DB(db, custom_auth_table.email)]\nauth.settings.table_user = custom_auth_table # tell auth to use custom_auth_table\n\n## before auth.define_tables()\n\n\n\nauth.define_tables()\n\n## configure email\nmail=auth.settings.mailer\nmail.settings.server = 'logging' or 'smtp.gmail.com:587'\nmail.settings.sender = 'you@gmail.com'\nmail.settings.login = 'username:password'\n\n## configure auth policy\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.settings.reset_password_requires_verification = True\n\n## if you need to use OpenID, Facebook, MySpace, Twitter, Linkedin, etc.\n## register with janrain.com, write your domain:api_key in private/janrain.key\nfrom gluon.contrib.login_methods.rpx_account import use_janrain\nuse_janrain(auth,filename='private/janrain.key')\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table('mytable',Field('myfield','string'))\n##\n## Fields can be 'string','text','password','integer','double','boolean'\n##       'date','time','datetime','blob','upload', 'reference TABLENAME'\n## There is an implicit 'id integer autoincrement' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield='value')\n## >>> rows=db(db.mytable.myfield=='value').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n\n\n"
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/marco/projects/final/web2py/gluon/restricted.py", line 205, in restricted\n    exec ccode in environment\n  File "/home/marco/projects/final/web2py/applications/woppi/models/db.py", line 54, in <module>\n    custom_auth_table.first_name.requires = IS_NOT_EMPTY(error_message=auth.messages.is_empty)\n  File "/home/marco/projects/final/web2py/gluon/dal.py", line 6774, in __getattr__\n    return self[key]\n  File "/home/marco/projects/final/web2py/gluon/dal.py", line 6714, in __getitem__\n    return dict.__getitem__(self, str(key))\nKeyError: \'first_name\'\n'
p11
s.